// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /**
 * A 16-Bit register called "A Register". 
 * If load[t-1]=1 then out[t] = in[t-1]
 * else out does not change (out[t] = out[t-1])
 *
 * This built-in chip implementation has the side effect of 
 * providing a GUI representation of a 16-bit register
 * called "A register" (typically used to store an address).
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Registrador A
    // Tipo A
    Not(in=instruction[15], out=outNotI);
    Mux16(a=outALU, b=instruction, sel=outNotI, out=outMuxI); // Primeiro Mux16 entra saída da ALU e instruction
    // Tipo C
    And(a=instruction[5], b=instruction[15], out=outAuxA);
    Or(a=outAuxA, b=outNotI, out=outOr); // O que faz com isso Jesus??
    ARegister(in=outMuxI, load=outOr, out=outAReg, out[0..14]=addressM); // Registrador A entra saída do primeiro Mux16 

    // ALU
    And(a=instruction[12], b=instruction[15], out=outALUAux);
    Mux16(a=outAReg, b=inM, sel=outALUAux, out=inALU); // sel=a
    ALU(x=outDReg, y=inALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=outZR, ng=outNG);
    // Registrador D
    And(a=instruction[4], b=instruction[15], out=outDAux);
    DRegister(in=outALU, load=outDAux, out=outDReg);
    And16(a=outALU, b=true, out=outM); // OUT outM[16]

    // Write to M?
    And(a=instruction[3], b=instruction[15], out=writeM); // OUT writeM

    // PC 
    // Load do PC
    Not(in=outZR, out=outNotZR);
    Not(in=outNG, out=outNotNG);
    And(a=outZR, b=outNG, out=outAndZRNG);
    And(a=outNotZR, b=outNotNG, out=outAndNotZRNG);

    // JGT
    And(a=instruction[0], b=outAndNotZRNG, out=outJGT);
    And(a=outJGT, b=instruction[15], out=JGT);
    // JEQ
    And(a=instruction[1], b=outZR, out=outJEQ);
    And(a=outJEQ, b=instruction[15], out=JEQ);
    // JLT
    And(a=instruction[2], b=outNG, out=outJLT);
    And(a=outJLT, b=instruction[15], out=JLT);

    // JUMP
    Or(a=JGT, b=JEQ, out=out01);
    Or(a=out01, b=JLT, out=outJumpALU); 

    // Inc do PC
    //Inc16(in=instruction, out=outInc);
    PC(in=outAReg, load=outJumpALU, inc=true, reset=reset, out=outPC, out[0..14]=pc); // load=jump bit da saída da ALU

}